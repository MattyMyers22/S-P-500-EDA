Can be found in Kaggle as well https://www.kaggle.com/mattymyers22/s-p-500-exploratory-data-analysis

# S&P 500 Daily, Monthly, and Yearly Returns
*by: Matthew Myers*

Performing an exploratory data analysis (EDA) for the S&P 500. The daily returns analysis will be calculated by hand from a dataset for 1927-12-30 to 2020-11-04. 
The monthly and yearly returns will be calculated using the quantmod package.

Any feedback or upvote is greatly appreciated :)

Shout out to henryhan117 for the dataset \
https://www.kaggle.com/henryhan117/sp-500-historical-data \
Most up to date dataset: \
https://finance.yahoo.com/quote/%5EGSPC/history?p=%5EGSPC

library(tidyverse) # metapackage of all tidyverse packages
library(lubridate) # works with dates
library(quantmod) # financial analysis functionality

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

list.files(path = "../input")

sp <- read_csv("../input/sp-500-historical-data/SPX.csv") # load the csv
str(sp) # look at the structure of the data
head(sp) # look at the head of the data
tail(sp) # look at tail of the data

#rename Adj Close
sp <- rename(sp, c("adj_close" = "Adj Close"))
head(sp)

# filter data for no volume
filter(sp, Volume == 0)

# filter for data with volume
sp_vol <- filter(sp, Volume != 0)
sp_vol

# create column of daily returns
sp_vol <- sp_vol %>%
  mutate(days_return = (adj_close - Open) / Open)
sp_vol

#create column for year
sp_vol <- sp_vol %>%
  mutate(year = year(Date))
sp_vol

#summarize returns each year
tapply(sp_vol$days_return, sp_vol$year, summary)

#look at the year 1961
filter(sp_vol, year == 1961)

#look at the year 1962
filter(sp_vol, year == 1962)

#filter data to start with 1962 and round days_return to percentages
sp_vol <- sp_vol %>%
  filter(year >= 1962) %>%
  mutate(days_return = round(days_return, digits = 4)) %>%
  mutate(days_return = days_return * 100)
sp_vol

summary(sp_vol$days_return) # summarize the daily returns
sd(sp_vol$days_return) # calculate standard deviation of daily returns

#visual interpretation
day_return_dist <- ggplot(sp_vol, aes(x = days_return)) +
  geom_bar() +
  labs(title = "Distribution of Daily Returns of S&P 500")
day_return_dist

# top 20 daily returns
top_20_days <- sp_vol %>%
  top_n(20, days_return) %>%
  arrange(desc(days_return))
top_20_days

# distribution of years with a top 20 day
top_day_years <- top_20_days %>%
  count(year(Date)) %>%
  arrange(desc(n)) %>%
  rename("Year" = "year(Date)", "Count" = "n") %>%
  mutate(Year = as.character(Year), Type = "Top")
top_day_years

#graphical representation of top days by year
top_20 <- ggplot(top_day_years, aes(x = Year, y = Count)) +
  geom_col(fill = "green4") +
  labs(y = "Number of Top Days", title = "S&P 500 Top 20 Daily Returns by Years")
top_20

# look at the 20 worst days
worst_20_days <- sp_vol %>%
  top_n(-20, days_return) %>%
  arrange(days_return)
worst_20_days

# years with a worst 20 day
worst_day_years <- worst_20_days %>%
  count(year(Date)) %>%
  arrange(desc(n)) %>%
  rename("Year" = "year(Date)", "Count" = "n") %>%
  mutate(Year = as.character(Year), Type = "Worst")
worst_day_years

# join the tables
top_worst_day_df <- merge(x = top_day_years, y = worst_day_years, 
                          by = c("Year", "Count", "Type"), all = TRUE)
top_worst_day_df

#graphical representation of the worst days
top_worst_20 <- ggplot(top_worst_day_df, aes(x = Year, y = Count, fill = Type)) +
  geom_col() +
  scale_fill_manual(values = c("Top" = "green4", "Worst" = "red")) +
  labs(title = "Top and Worst 20 Daily Returns for S&P 500 by Year")
top_worst_20

# get data object quantmod
initialDate <- "1930-01-01"
endDate <- "2020-12-31"
getSymbols("^GSPC", src = "yahoo", from = initialDate, to = endDate)

# get monthly returns data as a clean data frame
monthly_returns <- as.data.frame(monthlyReturn(GSPC))

#get rid of dates as row names
monthly_returns <- monthly_returns %>%
  mutate(date = rownames(monthly_returns))
row.names(monthly_returns) <- NULL

#create factor levels for months
factor_mon <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep",
                "Oct", "Nov", "Dec")

#perform the df manipulations
monthly_returns <- monthly_returns %>%
  select(date, monthly.returns) %>%
  mutate(date = as.Date(date, "%Y-%m-%d"), 
        monthly.returns = round(monthly.returns, digits = 3) * 100, 
        date = format(date, "%b %Y"), months = word(date, 1), 
        year = word(date, 2)) %>%
  mutate(months = as.factor(months), months = factor(months, levels = factor_mon))
  
head(monthly_returns)

#look at 20 top months
top_20_months <- monthly_returns %>%
  top_n(20, monthly.returns) %>%
  arrange(desc(monthly.returns))
top_20_months

#graph of top 20 appearances
top_mon_gr <- ggplot(top_20_months, aes(months)) +
                geom_bar(fill = "forestgreen") +
                labs(x = "Month", y = "Count of Appearances", 
                    title = "S&P 500 20 Top Monthly Returns 1930 - 2020")
top_mon_gr

#look at 20 worst months
worst_20_months <- monthly_returns %>%
  top_n(-20, monthly.returns) %>%
  arrange(monthly.returns)
worst_20_months

#worst 20 monthly returns chart
worst_mon_gr <- ggplot(worst_20_months, aes(factor(months, levels = factor_mon))) +
                geom_bar(fill = "darkred") +
                labs(x = "Month", y = "Count of Appearances", 
                    title = "S&P 500 20 Worst Monthly Returns 1930 - 2020")
worst_mon_gr

#summarize monthly returns by months
tapply(monthly_returns$monthly.returns, monthly_returns$months, summary)

#graphing the box plots
mon_gr <- ggplot(monthly_returns, aes(monthly.returns, months)) +
            geom_boxplot(outlier.shape = NA, color = "blue", fill = "forestgreen") +
            coord_cartesian(xlim = c(-14, 14)) +
            labs(x = "Monthly Returns in %", y = "Months", 
                title = "S&P 500 Monthly Returns 1930 - 2020")
mon_gr

#get yearly returns data as a data frame
yearly_returns <- as.data.frame(yearlyReturn(GSPC))

#get rid of dates as row names
yearly_returns <- yearly_returns %>%
  mutate(year = rownames(yearly_returns))
row.names(yearly_returns) <- NULL

#clean up the df
yearly_returns <- yearly_returns %>%
  select(year, yearly.returns) %>%
  mutate(year = as.Date(year, "%Y-%m-%d"), 
        yearly.returns = round(yearly.returns, digits = 3) * 100,
        year = format(year, "%Y"))
  
yearly_returns

#summary stats of yearly returns
summary(yearly_returns$yearly.returns)

#boxplot of returns
yr_gr <- ggplot(yearly_returns, aes(yearly.returns)) +
           geom_boxplot(color = "blue", fill = "forestgreen") +
           theme(axis.title.y = element_blank(), axis.text.y = element_blank(),
                axis.ticks.y = element_blank()) +
           labs(x = "Yearly Returns in %", title = "Yearly Returns of the S&P 500 
                1930 - 2020")
yr_gr

#portion of negative yearly returns
count(filter(yearly_returns, yearly.returns < 0)) / 
    (count(filter(yearly_returns, yearly.returns < 0)) + 
        count(filter(yearly_returns, yearly.returns >= 0)))
        
chartSeries(GSPC, subset = "1990::2020")
chartSeries(GSPC)
